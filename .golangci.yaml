version: "2"
run:
  timeout: 40s # default is 1m
output:
  formats:
    tab:
      print-linter-name: true
      colors: true
  sort-order:
    - severity
    - linter
    - file
formatters:
  enable:
    - gci
    - gofumpt
  settings:
    gci:
      sections:
        - standard # go packages
        - dot # импорты которые начинаются с "."
        - default # все внешние зависимости go.mod зависимости
        - blank # разделяем пустой строкой
        - prefix(github.com/releaseband/txservice/) # все остальные импорты которые начинаются с префикса
linters:
  # disabling all linters by default
  default: none
  enable:
    # Category: bugs
    # проверяет на правильность использования функций
    # по работе со строками (fmt.Sprintf, strings.Join, strings.Contains, strings.Builder, ...)
    - asasalint
    # проверяет уязвимости через двунаправленные символы,
    # так-же что комментарии не сломают код после компиляции (обязателен при работе с SQL, URL)
    - bidichk
    # проверка на закрытие тела запроса
    - bodyclose
    # проверка на правильное использование контекста
    - contextcheck
    # проверка на правильное использование time.Duration
    - durationcheck
    # проверяет корректность обработки ошибок
    - errorlint
    # проверяет, что все switch-case обработаны
    - exhaustive
    # обнаруживает вложенные контексты в циклах и функциональных литералах.
    - fatcontext
    # проверяет правильность использования директив компилятора //go:generate ...
    - gocheckcompilerdirectives
    # проверка на наличие уязвимостей в коде
    - gosec
    # проверка на наличие ошибок в коде
    - govet
    # проверяет, что slice инициализируется и используется правильно
    - makezero
    # в структурах которые будут сериализованы в JSON, проверяет наличие тегов json
    - musttag
    # проверка, что функция не возвращает nil ошибку
    - nilerr
    # проверка, что функция не возвращает nil nil
    - nilnil
    # проверка, что http запросы используются с контекстом
    - noctx
    # проверка на правильное использование proto getter
    - protogetter
    # проверка на переопределение переменных
    - reassign
    # проверяет, что все ресиверы в методах структуры единообразные (все указатели или все значения)
    - recvcheck
    # проверка, что ошибки от SQL запросов обрабатываются правильно
    - rowserrcheck
    # проверяет наличие ошибок в диапазонах OpenTelemetry/Census.
    - spancheck
    # проверка, что sql запросы закрываются правильно
    - sqlclosecheck
    # проверка на наличие ошибок в коде
    - staticcheck
    # проверяет, что testify правильно используется
    - testifylint
    # проверяет, что zerolog библиотека используется правильно
    - zerologlint

    # Category: error
    # - err113
    # проверка наличия необработанных ошибок
    - errcheck
    # проверка наличия не обернутых ошибок (через fmt.Errorf("context: %w", err))
    - wrapcheck

    # Category: style
    # проверяет правильность использования каноничных http headers
    - canonicalheader
    # запрещает встраивание в структуры ctx
    - containedctx
    # линтер, который обнаруживает места, где копируются переменные цикла
    - copyloopvar
    # проверяет, что функции не глушатся, ищет похожии конструкции - "_, _ = foo()"
    - dogsled
    # находит дублирующийся код
    - dupl
    # проверяет, что ошибки именуются с префикса Err и у типа ошибки название начинается с Error
    - errname
    # проверяет, что при создании структуры у нее были явно заполнены все поля
    - exhaustruct
    # через регулярные выражения запрещает использование определенных функций или конструкций
    - forbidigo
    # запрещает преобразование типов без проверки на соответствие
    # [bad]  number := a.(int)
    # [good] number, ok := a.(int)
    - forcetypeassert
    # находит повторяющиеся строки, которые можно заменить на const
    - goconst
    # рекомендует переписать init() функции на более явные конструкции
    - gochecknoinits
    # TODO: нам обязательно надо написать хедер
    # проверяет наличие хедера в файлах
    - goheader
    # попросит сгруппировать var, const конструкции
    - grouper
    # задает правила использования интерфейсов
    - iface
    # TODO: ❓нужно согласовать, какие у нас будут фильтры на алиасы
    # задает правила для единообразия import alias
    - importas
    # заставляет явно именовать аргументы в интерфейсах
    # [bad] type Foo interface { Foo(context.Context)}
    # [good] type Foo interface { Foo(ctx context.Context)}
    - inamedparam
    # для go > v1.20, задает правило для конструкций for:
    # [deprecated] for i:=0; i < count; i++ {}
    # [good] for i := range count {}
    - intrange
    # запрещает возвращать интерфейсы в функциях
    - ireturn
    # следит за соблюдением длины строки в коде
    - lll
    # помогает писать яснее при конструкциях if else
    - mirror
    # подсветит опечатки в коде (дубликат cspell, просто в рамках golangci)
    - misspell
    # находит магические числа, заставляет их выносить в const для явного объявления
    - mnd
    # просит явно указывать возвращаемые значения в коде (or nonamedreturns)
    - nakedret
    # проверяет наличие пустой строки перед оператором return (нужно для читабельности кода)
    - nlreturn
    # проверяет, что при заглушении линтера указана причина почему ее заглушили в необходимом для этого формате
    - nolintlint
    # проверяет наличие Sprintf для создания хоста с портом в URL (просит использовать net.JoinHostPort)
    - nosprintfhostport
    # проверка, что не используются зарезервированные языком имена функций
    - predeclared
    # для работы с prometheus
    - promlinter
    # проверяет правильность указания тегов
    - tagliatelle
    # подсвечивает бесполезные преобразования типов
    - unconvert
    # находит неиспользуемые аргументы функции
    - unparam
    # находит неиспользуемые переменные в коде
    - unused
    # предлагает использовать стандартные общепринятые константы
    # [bad] fiber.SendStatus(200)
    # [good] fiber.SendStatus(http.StatusOK)
    - usestdlibvars
    # (дообсудить исключения) проверка, что длина переменной соответсвует определенной длине
    - varnamelen
    # находит бесполезные операторы присвоения
    - wastedassign
    # ругается на пустые строки вначале функции и в конце
    - whitespace
    # слипание кода, расстановка переносов строк после if, for, switch, select
    - wsl_v5
    # проверяет, что идентификаторы кода не содержат символов, отличных от ASCII
    - asciicheck
    #  Проверка порядка объявления и количества типов, констант, переменных и функций
    - decorder
    # проверяет, есть ли импорт пакетов в списке допустимых пакетов
    - depguard # TODO: нужно конфигурировать + есть go-arch-lint
    # Убедитесь, что теги структуры хорошо выровнены
    - tagalign # TODO: нужно конфигурировать
    # Определяет, когда присвоения существующим переменным не используются
    - ineffassign
    # Проверка повторяющихся слов в исходном коде
    - dupword # ❓дубликат cspell?

    # Category: Performance
    # Проверяет, можно ли fmt.Sprintf заменить на более быструю альтернативу
    - perfsprint
    # Находит объявления slice, которые могут быть предварительно выделены
    - prealloc

    # Category: Complexity
    # проверяет функцию и цикломатическую сложность пакета
    - cyclop
    # ограничение по длине функции
    # выставлено на 60 строк не включая комментарии
    - funlen
    # Вычисляет и проверяет когнитивную сложность функций
    - gocognit
    # измеряет индекс поддерживаемости каждой функции
    - maintidx
    # Ограничивает вложенность if конструкций
    - nestif

    # Category: Test
    # заставляет писать все тесты в отдельных пакетах _test
    - testpackage
    # обнаруживает функции для тестов без использования t.Helper()
    - thelper
    # обнаруживает неправильное использование t.Parallel()
    - tparallel
    # обнаруживает функции, которые заменяются с testing.T
    - usetesting

    # Category: Metalinter
    - gocritic
  settings:
    depguard:
      rules:
        main:
          list-mode: lax
          deny:
            - pkg: "github.com/pkg/errors"
              desc: Should be replaced by standard lib errors package
    wrapcheck:
      ignore-package-globs:
        - encoding/*
        - github.com/golang/protobuf/proto
    grouper:
      const-require-grouping: true
      import-require-grouping: true
      var-require-grouping: true
      var-require-single-var: false
    varnamelen: # TODO: согласовать исключения и длину переменных
      ignore-names:
        - ok
        - id
        - tc # test case
        - tt # table test
      ignore-decls:
        - ctx context.Context
        - err error
        - i int
        - m *mock
        - m *Mock
        - mu *sync.Mutex
        - mu sync.Mutex
        - r *http.Request
        - t *testing.T
        - T any
        - t assert.TestingT
        - w http.ResponseWriter
        - wg *sync.WaitGroup
        - wg sync.WaitGroup
    funlen:
      ignore-comments: true
    lll:
      line-length: 100
      tab-width: 4
    errcheck:
      # проверка на наличие заглушенных ошибок
      check-blank: true
      # Сообщение о непроверке второго аргумента type assert
      # [bad]  a := b.(MyStruct)
      # [good] a, ok := b.(MyStruct)
      check-type-assertions: true
    exhaustive:
      check:
        - switch
        - map
    ireturn:
      allow:
        - stdlib
        - error
        - generic
        - go.uber.org/mock/gomock.Matcher
    nestif:
      min-complexity: 2
    nlreturn:
      block-size: 2
    govet:
      enable-all: true
    staticcheck:
      checks: ["all"]
    mnd:
      ignored-files:
        - '.*_test\.go'
    gocognit:
      min-complexity: 10 # default is 30
    wsl_v5:
      allow-first-in-block: true
      allow-whole-block: false
      branch-max-lines: 2
    forbidigo:
      # TODO: согласовать список запрещенных функций, добавить новые
      forbid:
        - pattern: "panic" # don't panic in code
        - pattern: "^print$"
        - pattern: "fmt.Println"
        - pattern: "fmt.Fprintln"
        - pattern: "fmt.Fprintf"
        - pattern: "os.Exit"
          msg: >-
            os.Exit exits the program, do not use it anywhere else except
            main.go
        - pattern: "log.Fatal"
          msg: Fatal exits the program with a non-zero status code.
        - pattern: "log.Fatalf"
          msg: Fatalf exits the program with a non-zero status code.
        - pattern: '^sort\.'
          msg: sort package is deprecated, use slices package instead
        - pattern: "^ioutil.*"
          msg: ioutil package is deprecated, use os and io packages instead

    gocritic:
      # Disable all checks.
      # Default: false
      disable-all: true
      # Which checks should be enabled in addition to default checks; can't be combined with 'disabled-checks'.
      # By default, list of stable checks is used (https://go-critic.com/overview#checks-overview):
      #   appendAssign, argOrder, assignOp, badCall, badCond, captLocal, caseOrder, codegenComment, commentFormatting,
      #   defaultCaseOrder, deprecatedComment, dupArg, dupBranchBody, dupCase, dupSubExpr, elseif, exitAfterDefer,
      #   flagDeref, flagName, ifElseChain, mapKey, newDeref, offBy1, regexpMust, singleCaseSwitch, sloppyLen,
      #   sloppyTypeAssert, switchTrue, typeSwitchVar, underef, unlambda, unslice, valSwap, wrapperFunc
      # To see which checks are enabled run `GL_DEBUG=gocritic golangci-lint run --enable=gocritic`.
      enabled-checks:
        # Detects suspicious append result assignments.
        # https://go-critic.com/overview.html#appendassign
        - appendAssign
        # Detects `append` chains to the same slice that can be done in a single `append` call.
        # https://go-critic.com/overview.html#appendcombine
        - appendCombine
        # Detects suspicious arguments order.
        # https://go-critic.com/overview.html#argorder
        - argOrder
        # Detects assignments that can be simplified by using assignment operators.
        # https://go-critic.com/overview.html#assignop
        - assignOp
        # Detects suspicious function calls.
        # https://go-critic.com/overview.html#badcall
        - badCall
        # Detects suspicious condition expressions.
        # https://go-critic.com/overview.html#badcond
        - badCond
        # Detects suspicious mutex lock/unlock operations.
        # https://go-critic.com/overview.html#badlock
        - badLock
        # Detects bad usage of sync.OnceFunc.
        # https://go-critic.com/overview.html#badsynconcefunc
        - badSyncOnceFunc
        # Detects bool expressions that can be simplified.
        # https://go-critic.com/overview.html#boolexprsimplify
        - boolExprSimplify
        # Detects top-level declarations that shadow the predeclared identifiers.
        # https://go-critic.com/overview.html#builtinshadowdecl
        - builtinShadowDecl
        # Detects capitalized names for local variables.
        # https://go-critic.com/overview.html#captlocal
        - captLocal
        # Detects erroneous case order inside switch statements.
        # https://go-critic.com/overview.html#caseorder
        - caseOrder
        # Detects comments with non-idiomatic formatting.
        # https://go-critic.com/overview.html#commentformatting
        # ? возможно это дубликат
        - commentFormatting
        # Detects commented-out imports.
        # https://go-critic.com/overview.html#commentedoutimport
        - commentedOutImport
        # Detects when default case in switch isn't on 1st or last position.
        # https://go-critic.com/overview.html#defaultcaseorder
        - defaultCaseOrder
        # Detects loops inside functions that use defer.
        # https://go-critic.com/overview.html#deferinloop
        - deferInLoop
        # Detects deferred function literals that can be simplified.
        # https://go-critic.com/overview.html#deferunlambda
        - deferUnlambda
        # Detects malformed 'deprecated' doc-comments.
        # https://go-critic.com/overview.html#deprecatedcomment
        - deprecatedComment
        # Detects comments that silence go lint complaints about doc-comment.
        # https://go-critic.com/overview.html#docstub
        # ? возможно это дубликат
        - docStub
        # Detects suspicious duplicated arguments.
        # https://go-critic.com/overview.html#duparg
        - dupArg
        # Detects duplicated branch bodies inside conditional statements.
        # https://go-critic.com/overview.html#dupbranchbody
        - dupBranchBody
        # Detects duplicated case clauses inside switch or select statements.
        # https://go-critic.com/overview.html#dupcase
        - dupCase
        # Detects multiple imports of the same package under different aliases.
        # https://go-critic.com/overview.html#dupimport
        - dupImport
        # Detects suspicious duplicated sub-expressions.
        # https://go-critic.com/overview.html#dupsubexpr
        - dupSubExpr
        # Detects suspicious formatting strings usage.
        # https://go-critic.com/overview.html#dynamicfmtstring
        - dynamicFmtString
        # Detects else with nested if statement that can be replaced with else-if.
        # https://go-critic.com/overview.html#elseif
        - elseif
        # Detects suspicious empty declarations blocks.
        # https://go-critic.com/overview.html#emptydecl
        - emptyDecl
        # Detects fallthrough that can be avoided by using multi case values.
        # https://go-critic.com/overview.html#emptyfallthrough
        - emptyFallthrough
        # Detects empty string checks that can be written more idiomatically.
        # https://go-critic.com/overview.html#emptystringtest
        - emptyStringTest
        # Detects unoptimal strings/bytes case-insensitive comparison.
        # https://go-critic.com/overview.html#equalfold
        - equalFold
        # Detects unwanted dependencies on the evaluation order.
        # https://go-critic.com/overview.html#evalorder
        - evalOrder
        # Detects exposed methods from sync.Mutex and sync.RWMutex.
        # https://go-critic.com/overview.html#exposedsyncmutex
        - exposedSyncMutex
        # Detects suspicious reassignment of error from another package.
        # https://go-critic.com/overview.html#externalerrorreassign
        - externalErrorReassign
        # Detects problems in filepath.Join() function calls.
        # https://go-critic.com/overview.html#filepathjoin
        - filepathJoin
        # Detects immediate dereferencing of `flag` package pointers.
        # https://go-critic.com/overview.html#flagderef
        - flagDeref
        # Detects suspicious flag names.
        # https://go-critic.com/overview.html#flagname
        - flagName
        # Detects hex literals that have mixed case letter digits.
        # https://go-critic.com/overview.html#hexliteral
        - hexLiteral
        # Detects nil usages in http.NewRequest calls, suggesting http.NoBody as an alternative.
        # https://go-critic.com/overview.html#httpnobody
        - httpNoBody
        # Detects params that incur excessive amount of copying.
        # https://go-critic.com/overview.html#hugeparam
        - hugeParam
        # Detects repeated if-else statements and suggests to replace them with switch statement.
        # https://go-critic.com/overview.html#ifelsechain
        - ifElseChain
        # Detects when imported package names shadowed in the assignments.
        # https://go-critic.com/overview.html#importshadow
        - importShadow
        # Detects strings.Index calls that may cause unwanted allocs.
        # https://go-critic.com/overview.html#indexalloc
        - indexAlloc
        # Detects non-assignment statements inside if/switch init clause.
        # https://go-critic.com/overview.html#initclause
        - initClause
        # Detects suspicious map literal keys.
        # https://go-critic.com/overview.html#mapkey
        - mapKey
        # Detects method expression call that can be replaced with a method call.
        # https://go-critic.com/overview.html#methodexprcall
        - methodExprCall
        # Finds where nesting level could be reduced.
        # https://go-critic.com/overview.html#nestingreduce
        - nestingReduce
        # Detects immediate dereferencing of `new` expressions.
        # https://go-critic.com/overview.html#newderef
        - newDeref
        # Detects return statements those results evaluate to nil.
        # https://go-critic.com/overview.html#nilvalreturn
        - nilValReturn
        # Detects old-style octal literals.
        # https://go-critic.com/overview.html#octalliteral
        - octalLiteral
        # Detects various off-by-one kind of errors.
        # https://go-critic.com/overview.html#offby1
        - offBy1
        # Detects if function parameters could be combined by type and suggest the way to do it.
        # https://go-critic.com/overview.html#paramtypecombine
        - paramTypeCombine
        # Detects expressions like []rune(s)[0] that may cause unwanted rune slice allocation.
        # https://go-critic.com/overview.html#preferdecoderune
        - preferDecodeRune
        # Detects concatenation with os.PathSeparator which can be replaced with filepath.Join.
        # https://go-critic.com/overview.html#preferfilepathjoin
        - preferFilepathJoin
        # Detects fmt.Sprint(f/ln) calls which can be replaced with fmt.Fprint(f/ln).
        # https://go-critic.com/overview.html#preferfprint
        - preferFprint
        # Detects w.Write or io.WriteString calls which can be replaced with w.WriteString.
        # https://go-critic.com/overview.html#preferstringwriter
        - preferStringWriter
        # Detects WriteRune calls with rune literal argument that is single byte and reports to use WriteByte instead.
        # https://go-critic.com/overview.html#preferwritebyte
        - preferWriteByte
        # Detects input and output parameters that have a type of pointer to referential type.
        # https://go-critic.com/overview.html#ptrtorefparam
        - ptrToRefParam
        # Detects append all its data while range it.
        # https://go-critic.com/overview.html#rangeappendall
        - rangeAppendAll
        # Detects expensive copies of `for` loop range expressions.
        # https://go-critic.com/overview.html#rangeexprcopy
        - rangeExprCopy
        # Detects loops that copy big objects during each iteration.
        # https://go-critic.com/overview.html#rangevalcopy
        - rangeValCopy
        # Detects redundant fmt.Sprint calls.
        # https://go-critic.com/overview.html#redundantsprint
        - redundantSprint
        # Detects `regexp.Compile*` that can be replaced with `regexp.MustCompile*`.
        # https://go-critic.com/overview.html#regexpmust
        - regexpMust
        # Detects suspicious http.Error call without following return.
        # https://go-critic.com/overview.html#returnafterhttperror
        - returnAfterHttpError
        # Detects switch statements that could be better written as if statement.
        # https://go-critic.com/overview.html#singlecaseswitch
        - singleCaseSwitch
        # Detects slice clear loops, suggests an idiom that is recognized by the Go compiler.
        # https://go-critic.com/overview.html#sliceclear
        - sliceClear
        # Detects usage of `len` when result is obvious or doesn't make sense.
        # https://go-critic.com/overview.html#sloppylen
        - sloppyLen
        # Detects redundant type assertions.
        # https://go-critic.com/overview.html#sloppytypeassert
        - sloppyTypeAssert
        # Detects "%s" formatting directives that can be replaced with %q.
        # https://go-critic.com/overview.html#sprintfquotedstring
        - sprintfQuotedString
        # Detects string concat operations that can be simplified.
        # https://go-critic.com/overview.html#stringconcatsimplify
        - stringConcatSimplify
        # Detects redundant conversions between string and []byte.
        # https://go-critic.com/overview.html#stringxbytes
        - stringXbytes
        # Detects switch-over-bool statements that use explicit `true` tag value.
        # https://go-critic.com/overview.html#switchtrue
        - switchTrue
        # Detects sync.Map load+delete operations that can be replaced with LoadAndDelete.
        # https://go-critic.com/overview.html#syncmaploadanddelete
        - syncMapLoadAndDelete
        # Detects manual conversion to milli- or microseconds.
        # https://go-critic.com/overview.html#timeexprsimplify
        - timeExprSimplify
        # Detects TODO comments without detail/assignee.
        # https://go-critic.com/overview.html#todocommentwithoutdetail
        - todoCommentWithoutDetail
        # Detects function with too many results.
        # https://go-critic.com/overview.html#toomanyresultschecker
        - tooManyResultsChecker
        # Detects potential truncation issues when comparing ints of different sizes.
        # https://go-critic.com/overview.html#truncatecmp
        - truncateCmp
        # Detects repeated type assertions and suggests to replace them with type switch statement.
        # https://go-critic.com/overview.html#typeassertchain
        - typeAssertChain
        # Detects method declarations preceding the type definition itself.
        # https://go-critic.com/overview.html#typedeffirst
        - typeDefFirst
        # Detects type switches that can benefit from type guard clause with variable.
        # https://go-critic.com/overview.html#typeswitchvar
        - typeSwitchVar
        # Detects unneeded parenthesis inside type expressions and suggests to remove them.
        # https://go-critic.com/overview.html#typeunparen
        - typeUnparen
        # Detects dereference expressions that can be omitted.
        # https://go-critic.com/overview.html#underef
        - underef
        # Detects redundant statement labels.
        # https://go-critic.com/overview.html#unlabelstmt
        - unlabelStmt
        # Detects function literals that can be simplified.
        # https://go-critic.com/overview.html#unlambda
        - unlambda
        # Detects unnamed results that may benefit from names.
        # https://go-critic.com/overview.html#unnamedresult
        - unnamedResult
        # Detects unnecessary braced statement blocks.
        # https://go-critic.com/overview.html#unnecessaryblock
        - unnecessaryBlock
        # Detects redundantly deferred calls.
        # https://go-critic.com/overview.html#unnecessarydefer
        - unnecessaryDefer
        # Detects slice expressions that can be simplified to sliced expression itself.
        # https://go-critic.com/overview.html#unslice
        - unslice
        # Detects value swapping code that are not using parallel assignment.
        # https://go-critic.com/overview.html#valswap
        - valSwap
        # Detects conditions that are unsafe due to not being exhaustive.
        # https://go-critic.com/overview.html#weakcond
        - weakCond
        # Detects function calls that can be replaced with convenience wrappers.
        # https://go-critic.com/overview.html#wrapperfunc
        - wrapperFunc
        # Detects Yoda style expressions and suggests to replace them.
        # https://go-critic.com/overview.html#yodastyleexpr
        - yodaStyleExpr
      # The list of supported checkers can be find in https://go-critic.com/overview.
      settings:
        elseif:
          # Whether to skip balanced if-else pairs.
          # Default: true
          skipBalanced: false
        hugeParam:
          sizeThreshold: 150
        nestingReduce:
          # Min number of statements inside a branch to trigger a warning.
          # Default: 5
          bodyWidth: 4
        tooManyResultsChecker:
          # Maximum number of results.
          # Default: 5
          maxResults: 3
        underef:
          # Whether to skip (*x).method() calls where x is a pointer receiver.
          # Default: true
          skipRecvDeref: false
    importas: {}
      # TODO: согласовать список алиасов
  exclusions:
    warn-unused: true
    rules:
      - path: '(.+)_test\.go'
        linters:
          - govet
          - gosec
# если хочешь чтобы линтеры пытались исправить ошибки сами,
# то раскомментируй строку ниже
#  fix: true
